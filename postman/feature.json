{
	"info": {
		"_postman_id": "4e65ceed-b8cf-494f-ae70-85ff958ba280",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23158755"
	},
	"item": [
		{
			"name": "Create subscription",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"followerId\", follower.id)\r",
							"        pm.collectionVariables.set(\"followerName\", follower.name)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.variables;\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: userId, follower\", function () {\r",
							"pm.expect(target).to.have.property('userId');\r",
							"pm.expect(target).to.have.property('follower');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.userId).equal(source.get('userId'), 'ID юзера должно соответствовать ID юзера в запросе');\r",
							"    pm.expect(target.follower.id).equal(source.get('followerId'), 'ID фоловера должен соответствовать ID фоловера в запросе');\r",
							"    pm.expect(target.follower.name).equal(source.get('followerName'), 'Имя фоловера должен соответствовать Имени фоловера в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr/:followerId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr",
						":followerId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "followerId",
							"value": "{{followerId}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "Create exist subscription",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"followerId\", follower.id)\r",
							"        await api.addSubscription(user.id, follower.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"var target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответветствовать общей формуле ошибки\", function () {\r",
							"    pm.expect(target.status).to.eql(\"CONFLICT\", \"Статус ошибки должен быть CONFLICT\");\r",
							"    pm.expect(target.reason).to.eql(\"Integrity constraint has been violated.\", \"Причина ошибки не соответствует ожидаемому\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr/:followerId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr",
						":followerId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "followerId",
							"value": "{{followerId}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "Create subscription to incorrect follower",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"var target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответветствовать общей формуле ошибки\", function () {\r",
							"    pm.expect(target.status).to.eql(\"NOT_FOUND\", \"Статус ошибки должен быть NOT_FOUND\");\r",
							"    pm.expect(target.reason).to.eql(\"The required object was not found.\", \"Причина ошибки не соответствует ожидаемому\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr/:followerId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr",
						":followerId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "followerId",
							"value": "-100"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "Get all followers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.variables;\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.length, 'followers count in total').to.eql(1);\r",
							"    pm.expect(target[0].id).equal(source.get('followerId'), 'ID фоловера должен соответствовать ID фоловера в запросе');\r",
							"    pm.expect(target[0].name).equal(source.get('followerName'), 'Имя фоловера должен соответствовать Имени фоловера в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"followerId\", follower.id)\r",
							"        pm.collectionVariables.set(\"followerName\", follower.name)\r",
							"        await api.addSubscription(user.id, follower.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/followers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"followers"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get empty followers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.length, 'followers count in total').to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/followers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"followers"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get empty subscriptions (event not published)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.length, 'subscriptions count in total').to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        await api.addSubscription(user.id, follower.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        await api.addEvent(follower.id, rnd.getEvent(category.id));\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all subscriptions (event published)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.variables;\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.length, 'subscriptions count in total').to.eql(1);\r",
							"    pm.expect(target[0].id).equal(source.get('eventId'), 'ID события должен соответствовать ID события в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, confirmedRequests, eventDate, initiator, paid, views\", function () {\r",
							"pm.expect(target[0]).to.have.property('id');\r",
							"pm.expect(target[0]).to.have.property('title');\r",
							"pm.expect(target[0]).to.have.property('annotation');\r",
							"pm.expect(target[0]).to.have.property('category');\r",
							"pm.expect(target[0]).to.have.property('confirmedRequests');\r",
							"pm.expect(target[0]).to.have.property('eventDate');\r",
							"pm.expect(target[0]).to.have.property('initiator');\r",
							"pm.expect(target[0]).to.have.property('paid');\r",
							"pm.expect(target[0]).to.have.property('views');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        await api.addSubscription(user.id, follower.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(follower.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eventId\", event.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get empty subscription by follower (event not published)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.length, 'subscriptions count in total').to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"followerId\", follower.id)\r",
							"        await api.addSubscription(user.id, follower.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        await api.addEvent(follower.id, rnd.getEvent(category.id));\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr/:followerId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr",
						":followerId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						},
						{
							"key": "followerId",
							"value": "{{followerId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get subscription by follower (event published)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.variables;\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.length, 'subscriptions count in total').to.eql(1);\r",
							"    pm.expect(target[0].id).equal(source.get('eventId'), 'ID события должен соответствовать ID события в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, confirmedRequests, eventDate, initiator, paid, views\", function () {\r",
							"pm.expect(target[0]).to.have.property('id');\r",
							"pm.expect(target[0]).to.have.property('title');\r",
							"pm.expect(target[0]).to.have.property('annotation');\r",
							"pm.expect(target[0]).to.have.property('category');\r",
							"pm.expect(target[0]).to.have.property('confirmedRequests');\r",
							"pm.expect(target[0]).to.have.property('eventDate');\r",
							"pm.expect(target[0]).to.have.property('initiator');\r",
							"pm.expect(target[0]).to.have.property('paid');\r",
							"pm.expect(target[0]).to.have.property('views');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"followerId\", follower.id)\r",
							"        await api.addSubscription(user.id, follower.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(follower.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eventId\", event.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr/:followerId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr",
						":followerId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						},
						{
							"key": "followerId",
							"value": "{{followerId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get subscription by follower with page (event published)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.variables;\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.length, 'subscriptions count in total').to.eql(1);\r",
							"    pm.expect(target[0].id).equal(source.get('eventId'), 'ID события должен соответствовать ID события в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, confirmedRequests, eventDate, initiator, paid, views\", function () {\r",
							"pm.expect(target[0]).to.have.property('id');\r",
							"pm.expect(target[0]).to.have.property('title');\r",
							"pm.expect(target[0]).to.have.property('annotation');\r",
							"pm.expect(target[0]).to.have.property('category');\r",
							"pm.expect(target[0]).to.have.property('confirmedRequests');\r",
							"pm.expect(target[0]).to.have.property('eventDate');\r",
							"pm.expect(target[0]).to.have.property('initiator');\r",
							"pm.expect(target[0]).to.have.property('paid');\r",
							"pm.expect(target[0]).to.have.property('views');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"followerId\", follower.id)\r",
							"        await api.addSubscription(user.id, follower.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(follower.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eventId\", event.id)\r",
							"        let event2 = await api.addEvent(follower.id, rnd.getEvent(category.id));\r",
							"        event2 = await api.publishEvent(event2.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr/:followerId?from=0&size=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr",
						":followerId"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						},
						{
							"key": "followerId",
							"value": "{{followerId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get subscription by follower with invalid page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"var target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: status, reason, message, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответветствовать общей формуле ошибки\", function () {\r",
							"    pm.expect(target.status).to.eql(\"BAD_REQUEST\", \"Статус ошибки должен быть BAD_REQUEST\");\r",
							"    pm.expect(target.reason).to.eql(\"Incorrectly made request.\", \"Причина ошибки не соответствует ожидаемому\");\r",
							"    pm.expect(target.message).to.eql(\"Field: size. Error: must be greater than 0. Value: -1\", \"Сообщение ошибки не соответствует ожидаемому\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr/:followerId?from=0&size=-1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr",
						":followerId"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "-1"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						},
						{
							"key": "followerId",
							"value": "{{followerId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove subscription",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const source = pm.variables.get('response');\r",
							"\r",
							"pm.test(\"Подписка должена быть найдена до выполнения запроса\", function(){\r",
							"    pm.expect(source.length).to.eql(1);\r",
							"    pm.expect(source[0].id).to.eql(pm.variables.get(\"eventId\"));\r",
							"});\r",
							"\r",
							"let body\r",
							"const req = {\r",
							"                url: \"http://localhost:8080/users/\" + pm.variables.get(\"userId\") + \"/subscr\",\r",
							"                method: \"GET\",\r",
							"                body: body == null ? \"\" : JSON.stringify(body),\r",
							"                header: { \"Content-Type\": \"application/json\" },\r",
							"            };\r",
							"pm.sendRequest(req, (error, response) => {\r",
							"    pm.test(\"Подписка должна быть удалён после выполнения запроса\", function(){\r",
							"        pm.expect(response.json().length).to.eql(0);\r",
							"    });\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"userId\", user.id)\r",
							"        const follower = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"followerId\", follower.id)\r",
							"        await api.addSubscription(user.id, follower.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(follower.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eventId\", event.id)\r",
							"        const subscr = await api.findSubscriptions(user.id);\r",
							"        pm.collectionVariables.set(\"response\", subscr)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/subscr/:followerId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"subscr",
						":followerId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						},
						{
							"key": "followerId",
							"value": "{{followerId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addSubscription(userId, followerId, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/subscr/\" + followerId, null, \"Ошибка при добавлении новой подписки: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async findSubscriptions(userId, verbose=null) {",
					"        return this.get('/users/' + userId + '/subscr', null, \"Ошибка при поиске подписок пользователя\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "followerId",
			"value": ""
		},
		{
			"key": "followerName",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		}
	]
}